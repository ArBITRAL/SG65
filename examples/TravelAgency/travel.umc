Class System with niceparallelism is
Signals:
	allowsend(i:int);
	broadcast(tgt,msg,j:int);
Vars:
	RANDOMQUEUE;
	receiving:bool := false;
	pc :int[];
	bound:int[];
	total:int :=0;
	
	-- attributes
	bid;
	cid;
	counter;
	day;
	dist;
	favh;
	hid;
	loc;
	locality;
	nh;
	price;
	ref;
	room;
	send;
	stype;
State Top Defers allowsend(i)
Transitions:
init -> SYS {-/ 
	pc := [[1,1],[1,1],[1,1,1,1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]];
	for i in 0..pc.length-1 {
		self.allowsend(i);
	}}

 ---------- COMPONENT TEMPLATE Cust ------------ 




 ---------- COMPONENT TEMPLATE Broker ------------ 




 ---------- COMPONENT TEMPLATE Hotel ------------ 


---------- COMPONENT Cust1 ------------ 
----- Send ----- 
SYS.Cust1.s0 -> Cust1.s0 {
	allowsend(i)[receiving = false and i = 0 and (send[0] = true) and pc[0][0] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (stype[j] = trustedBroker) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := acms;
		msg2:int := cid[0];
		msg3:int := loc[0];
		msg4:int := day[0];
		msg5:int := price[0];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],0 ); 
		OUT.sending(Cust1,[msg1,msg2,msg3,msg4,msg5]);
		--- attr update --- 
		send[0] := false;
		pc[0][0] = 2;
	} else {
		--- attr update --- 
		send[0] := false;
		receiving=false;
		self.allowsend(0);
		pc[0][0] = 1;
		bound[0][0] := 0;
	};
}
SYS.Cust1.s0 -> Cust1.s0 {
	broadcast(tgt,msg,j)[pc[0][0] = 2]/
	receiving=false;
	self.allowsend(0);
	pc[0][0] = 1;
	bound[0][0] := 0;
} 
 ----- Receive ----- 
SYS.Cust1.s0 -> Cust1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = offer and price[0] >=msg[3] and (loc[0]-msg[2] <= dist[0] or loc[0]-msg[2] <= dist[0])) and pc[0][1] = 1]/
	bound[0][1][0] = msg[0];
	bound[0][1][1] = msg[1];
	bound[0][1][2] = msg[2];
	bound[0][1][3] = msg[3];
	bound[0][1][4] = msg[4];
	price[0] := bound[0][1][3];
	favh[0] := bound[0][1][1];
	ref[0] := bound[0][1][4];
	OUT.received(Cust1,msg);
	pc[0][1] = 1;
	bound[0][1] := 0;
}
 
 ----- Receive ----- 
SYS.Cust1.s0 -> Cust1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = finish) and pc[0][1] = 1]/
	bound[0][1][0] = msg[0];
	OUT.received(Cust1,msg);
	pc[0][1] = 2;
}
 
 ----- Send ----- 
SYS.Cust1.s0 -> Cust1.s0 {
	allowsend(i)[receiving = false and i = 0 and (favh[0] != undef) and pc[0][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (hid[j] = favh[0]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := book;
		msg2:int := cid[0];
		msg3:int := day[0];
		msg4:int := ref[0];
		self.broadcast(target,[msg1,msg2,msg3,msg4],0 ); 
		OUT.sending(Cust1,[msg1,msg2,msg3,msg4]);
		pc[0][1] = 3;
	} else {
		receiving=false;
		self.allowsend(0);
		pc[0][1] = 4;
	};
}
SYS.Cust1.s0 -> Cust1.s0 {
	broadcast(tgt,msg,j)[pc[0][1] = 3]/
	receiving=false;
	self.allowsend(0);
	pc[0][1] = 4;
} 
 ----- Receive ----- 
SYS.Cust1.s0 -> Cust1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = confirm) and pc[0][1] = 4]/
	bound[0][1][0] = msg[0];
	OUT.received(Cust1,msg);
	pc[0][1] = 5;
	bound[0][1] := 0;
	pc[0][1] := 0;
}
 
 ----- Receive ----- 
SYS.Cust1.s0 -> Cust1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = toolate) and pc[0][1] = 4]/
	bound[0][1][0] = msg[0];
	send[0] := true;
	OUT.received(Cust1,msg);
	pc[0][1] = 1;
	bound[0][1] := 0;
}
 
 -----Empty Send ----- 
SYS.Cust1.s0 -> Cust1.s0 {
	allowsend(i)[receiving = false and i = 0 and (favh[0] = undef) and pc[0][1] = 2]/
	send[0] := true;
	self.allowsend(0);
	pc[0][1] = 1;
	bound[0][1] := 0;
}

---------- COMPONENT Cust2 ------------ 
----- Send ----- 
SYS.Cust2.s0 -> Cust2.s0 {
	allowsend(i)[receiving = false and i = 1 and (send[1] = true) and pc[1][0] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (stype[j] = trustedBroker) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := acms;
		msg2:int := cid[1];
		msg3:int := loc[1];
		msg4:int := day[1];
		msg5:int := price[1];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],1 ); 
		OUT.sending(Cust2,[msg1,msg2,msg3,msg4,msg5]);
		--- attr update --- 
		send[1] := false;
		pc[1][0] = 2;
	} else {
		--- attr update --- 
		send[1] := false;
		receiving=false;
		self.allowsend(1);
		pc[1][0] = 1;
		bound[1][0] := 0;
	};
}
SYS.Cust2.s0 -> Cust2.s0 {
	broadcast(tgt,msg,j)[pc[1][0] = 2]/
	receiving=false;
	self.allowsend(1);
	pc[1][0] = 1;
	bound[1][0] := 0;
} 
 ----- Receive ----- 
SYS.Cust2.s0 -> Cust2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = offer and price[1] >=msg[3] and (loc[1]-msg[2] <= dist[1] or loc[1]-msg[2] <= dist[1])) and pc[1][1] = 1]/
	bound[1][1][0] = msg[0];
	bound[1][1][1] = msg[1];
	bound[1][1][2] = msg[2];
	bound[1][1][3] = msg[3];
	bound[1][1][4] = msg[4];
	price[1] := bound[1][1][3];
	favh[1] := bound[1][1][1];
	ref[1] := bound[1][1][4];
	OUT.received(Cust2,msg);
	pc[1][1] = 1;
	bound[1][1] := 0;
}
 
 ----- Receive ----- 
SYS.Cust2.s0 -> Cust2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = finish) and pc[1][1] = 1]/
	bound[1][1][0] = msg[0];
	OUT.received(Cust2,msg);
	pc[1][1] = 2;
}
 
 ----- Send ----- 
SYS.Cust2.s0 -> Cust2.s0 {
	allowsend(i)[receiving = false and i = 1 and (favh[1] != undef) and pc[1][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (hid[j] = favh[1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := book;
		msg2:int := cid[1];
		msg3:int := day[1];
		msg4:int := ref[1];
		self.broadcast(target,[msg1,msg2,msg3,msg4],1 ); 
		OUT.sending(Cust2,[msg1,msg2,msg3,msg4]);
		pc[1][1] = 3;
	} else {
		receiving=false;
		self.allowsend(1);
		pc[1][1] = 4;
	};
}
SYS.Cust2.s0 -> Cust2.s0 {
	broadcast(tgt,msg,j)[pc[1][1] = 3]/
	receiving=false;
	self.allowsend(1);
	pc[1][1] = 4;
} 
 ----- Receive ----- 
SYS.Cust2.s0 -> Cust2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = confirm) and pc[1][1] = 4]/
	bound[1][1][0] = msg[0];
	OUT.received(Cust2,msg);
	pc[1][1] = 5;
	bound[1][1] := 0;
	pc[1][1] := 0;
}
 
 ----- Receive ----- 
SYS.Cust2.s0 -> Cust2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = toolate) and pc[1][1] = 4]/
	bound[1][1][0] = msg[0];
	send[1] := true;
	OUT.received(Cust2,msg);
	pc[1][1] = 1;
	bound[1][1] := 0;
}
 
 -----Empty Send ----- 
SYS.Cust2.s0 -> Cust2.s0 {
	allowsend(i)[receiving = false and i = 1 and (favh[1] = undef) and pc[1][1] = 2]/
	send[1] := true;
	self.allowsend(1);
	pc[1][1] = 1;
	bound[1][1] := 0;
}

---------- COMPONENT B1 ------------ 
----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = acms) and pc[2][0] = 1]/
	bound[2][0][0] = msg[0];
	bound[2][0][1] = msg[1];
	bound[2][0][2] = msg[2];
	bound[2][0][3] = msg[3];
	bound[2][0][4] = msg[4];
	counter[2][bound[2][0][1]] := 0;
	OUT.received(B1,msg);
	pc[2][0] = 2;
}
 
 ----- Send ----- 
SYS.B1.s0 -> B1.s0 {
	allowsend(i)[receiving = false and i = 2 and pc[2][0] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (stype[j] = trustedHotel and locality[j] = bound[2][0][2]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := acms;
		msg2:int := bound[2][0][1];
		msg3:int := bound[2][0][3];
		msg4:int := bid[2];
		self.broadcast(target,[msg1,msg2,msg3,msg4],2 ); 
		OUT.sending(B1,[msg1,msg2,msg3,msg4]);
		pc[2][0] = 3;
	} else {
		receiving=false;
		self.allowsend(2);
		pc[2][0] = 4;
	};
}
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[pc[2][0] = 3]/
	receiving=false;
	self.allowsend(2);
	pc[2][0] = 4;
} 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (counter[2][bound[2][0][1]] < nh[2][bound[2][0][2]]) and (msg[0] = offer and msg[1] = bound[2][0][1] and msg[4] <= bound[2][0][4]) and pc[2][0] = 4 and pc[2][1] = 1]/
	-- Transfer bound variables -- 
	bound[2][1] := bound[2][0];
	bound[2][1][0] = msg[0];
	bound[2][1][5] = msg[1];
	bound[2][1][6] = msg[2];
	bound[2][1][2] = msg[3];
	bound[2][1][7] = msg[4];
	OUT.received(B1,msg);
	pc[2][1] = 2;
}
 
 ----- Send ----- 
SYS.B1.s0 -> B1.s0 {
	allowsend(i)[receiving = false and i = 2 and pc[2][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[2][1][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[2][1][6];
		msg3:int := bound[2][1][2];
		msg4:int := bound[2][1][7];
		msg5:int := bid[2];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],2 ); 
		OUT.sending(B1,[msg1,msg2,msg3,msg4,msg5]);
		--- attr update --- 
		counter[2][bound[2][1][1]] := counter[2][bound[2][1][1]]+1;
		pc[2][1] = 3;
	} else {
		--- attr update --- 
		counter[2][bound[2][1][1]] := counter[2][bound[2][1][1]]+1;
		receiving=false;
		self.allowsend(2);
		pc[2][1] = 4;
		bound[2][1] := 0;
		pc[2][1]:= 0;
	};
}
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[pc[2][1] = 3]/
	receiving=false;
	self.allowsend(2);
	pc[2][1] = 4;
	bound[2][1] := 0;
	pc[2][1]:= 0;
} 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (counter[2][bound[2][0][1]] < nh[2][bound[2][0][2]]) and (msg[0] = offer and msg[1] = bound[2][0][1] and msg[4] <= bound[2][0][4]) and pc[2][0] = 4 and pc[2][2] = 1 and pc[2][1] /= 1]/
	-- Transfer bound variables -- 
	bound[2][2] := bound[2][0];
	bound[2][2][0] = msg[0];
	bound[2][2][5] = msg[1];
	bound[2][2][6] = msg[2];
	bound[2][2][2] = msg[3];
	bound[2][2][7] = msg[4];
	OUT.received(B1,msg);
	pc[2][2] = 2;
}
 
 ----- Send ----- 
SYS.B1.s0 -> B1.s0 {
	allowsend(i)[receiving = false and i = 2 and pc[2][2] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[2][2][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[2][2][6];
		msg3:int := bound[2][2][2];
		msg4:int := bound[2][2][7];
		msg5:int := bid[2];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],2 ); 
		OUT.sending(B1,[msg1,msg2,msg3,msg4,msg5]);
		--- attr update --- 
		counter[2][bound[2][2][1]] := counter[2][bound[2][2][1]]+1;
		pc[2][2] = 3;
	} else {
		--- attr update --- 
		counter[2][bound[2][2][1]] := counter[2][bound[2][2][1]]+1;
		receiving=false;
		self.allowsend(2);
		pc[2][2] = 4;
		bound[2][2] := 0;
		pc[2][2]:= 0;
	};
}
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[pc[2][2] = 3]/
	receiving=false;
	self.allowsend(2);
	pc[2][2] = 4;
	bound[2][2] := 0;
	pc[2][2]:= 0;
} 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (counter[2][bound[2][0][1]] < nh[2][bound[2][0][2]]) and (msg[0] = offer and msg[4] > bound[2][0][4]) and pc[2][0] = 4 and pc[2][3] = 1]/
	-- Transfer bound variables -- 
	bound[2][3] := bound[2][0];
	bound[2][3][0] = msg[0];
	bound[2][3][5] = msg[1];
	bound[2][3][6] = msg[2];
	bound[2][3][2] = msg[3];
	bound[2][3][7] = msg[4];
	counter[2][bound[2][3][1]] := counter[2][bound[2][3][1]]+1;
	OUT.received(B1,msg);
	pc[2][3] = 1;
	bound[2][3] := 0;
}
 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (counter[2][bound[2][0][1]] < nh[2][bound[2][0][2]]) and (msg[0] = nooffer and msg[1] = bound[2][0][1]) and pc[2][0] = 4 and pc[2][3] = 1]/
	-- Transfer bound variables -- 
	bound[2][3] := bound[2][0];
	bound[2][3][0] = msg[0];
	bound[2][3][5] = msg[1];
	counter[2][bound[2][3][1]] := counter[2][bound[2][3][1]]+1;
	OUT.received(B1,msg);
	pc[2][3] = 1;
	bound[2][3] := 0;
}
 
 ----- Send ----- 
SYS.B1.s0 -> B1.s0 {
	allowsend(i)[receiving = false and i = 2 and (counter[2][bound[2][0][1]] = nh[2][bound[2][0][2]]) and pc[2][0] = 4 and pc[2][3] = 1]/
-- Transfer bound variables -- 
	bound[2][3] := bound[2][0];
		target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[2][3][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := finish;
		self.broadcast(target,[msg1],2 ); 
		OUT.sending(B1,[msg1]);
		pc[2][3] = 5;
	} else {
		receiving=false;
		self.allowsend(2);
		pc[2][3] = 6;
		bound[2][3] := 0;
		pc[2][3]:= 0;
	};
}
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[pc[2][3] = 5]/
	receiving=false;
	self.allowsend(2);
	pc[2][3] = 6;
	bound[2][3] := 0;
	pc[2][3]:= 0;
} 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = acms) and pc[2][4] = 1]/
	bound[2][4][0] = msg[0];
	bound[2][4][1] = msg[1];
	bound[2][4][2] = msg[2];
	bound[2][4][3] = msg[3];
	bound[2][4][4] = msg[4];
	counter[2][bound[2][4][1]] := 0;
	OUT.received(B1,msg);
	pc[2][4] = 2;
}
 
 ----- Send ----- 
SYS.B1.s0 -> B1.s0 {
	allowsend(i)[receiving = false and i = 2 and pc[2][4] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (stype[j] = trustedHotel and locality[j] = bound[2][4][2]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := acms;
		msg2:int := bound[2][4][1];
		msg3:int := bound[2][4][3];
		msg4:int := bid[2];
		self.broadcast(target,[msg1,msg2,msg3,msg4],2 ); 
		OUT.sending(B1,[msg1,msg2,msg3,msg4]);
		pc[2][4] = 3;
	} else {
		receiving=false;
		self.allowsend(2);
		pc[2][4] = 4;
	};
}
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[pc[2][4] = 3]/
	receiving=false;
	self.allowsend(2);
	pc[2][4] = 4;
} 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (counter[2][bound[2][4][1]] < nh[2][bound[2][4][2]]) and (msg[0] = offer and msg[1] = bound[2][4][1] and msg[4] <= bound[2][4][4]) and pc[2][4] = 4 and pc[2][5] = 1]/
	-- Transfer bound variables -- 
	bound[2][5] := bound[2][4];
	bound[2][5][0] = msg[0];
	bound[2][5][5] = msg[1];
	bound[2][5][6] = msg[2];
	bound[2][5][2] = msg[3];
	bound[2][5][7] = msg[4];
	OUT.received(B1,msg);
	pc[2][5] = 2;
}
 
 ----- Send ----- 
SYS.B1.s0 -> B1.s0 {
	allowsend(i)[receiving = false and i = 2 and pc[2][5] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[2][5][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[2][5][6];
		msg3:int := bound[2][5][2];
		msg4:int := bound[2][5][7];
		msg5:int := bid[2];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],2 ); 
		OUT.sending(B1,[msg1,msg2,msg3,msg4,msg5]);
		--- attr update --- 
		counter[2][bound[2][5][1]] := counter[2][bound[2][5][1]]+1;
		pc[2][5] = 3;
	} else {
		--- attr update --- 
		counter[2][bound[2][5][1]] := counter[2][bound[2][5][1]]+1;
		receiving=false;
		self.allowsend(2);
		pc[2][5] = 4;
		bound[2][5] := 0;
		pc[2][5]:= 0;
	};
}
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[pc[2][5] = 3]/
	receiving=false;
	self.allowsend(2);
	pc[2][5] = 4;
	bound[2][5] := 0;
	pc[2][5]:= 0;
} 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (counter[2][bound[2][4][1]] < nh[2][bound[2][4][2]]) and (msg[0] = offer and msg[4] > bound[2][4][4]) and pc[2][4] = 4 and pc[2][6] = 1]/
	-- Transfer bound variables -- 
	bound[2][6] := bound[2][4];
	bound[2][6][0] = msg[0];
	bound[2][6][5] = msg[1];
	bound[2][6][6] = msg[2];
	bound[2][6][2] = msg[3];
	bound[2][6][7] = msg[4];
	counter[2][bound[2][6][1]] := counter[2][bound[2][6][1]]+1;
	OUT.received(B1,msg);
	pc[2][6] = 1;
	bound[2][6] := 0;
}
 
 ----- Receive ----- 
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (counter[2][bound[2][4][1]] < nh[2][bound[2][4][2]]) and (msg[0] = nooffer and msg[1] = bound[2][4][1]) and pc[2][4] = 4 and pc[2][6] = 1]/
	-- Transfer bound variables -- 
	bound[2][6] := bound[2][4];
	bound[2][6][0] = msg[0];
	bound[2][6][5] = msg[1];
	counter[2][bound[2][6][1]] := counter[2][bound[2][6][1]]+1;
	OUT.received(B1,msg);
	pc[2][6] = 1;
	bound[2][6] := 0;
}
 
 ----- Send ----- 
SYS.B1.s0 -> B1.s0 {
	allowsend(i)[receiving = false and i = 2 and (counter[2][bound[2][4][1]] = nh[2][bound[2][4][2]]) and pc[2][4] = 4 and pc[2][6] = 1]/
-- Transfer bound variables -- 
	bound[2][6] := bound[2][4];
		target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[2][6][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := finish;
		self.broadcast(target,[msg1],2 ); 
		OUT.sending(B1,[msg1]);
		pc[2][6] = 5;
	} else {
		receiving=false;
		self.allowsend(2);
		pc[2][6] = 6;
		bound[2][6] := 0;
		pc[2][6]:= 0;
	};
}
SYS.B1.s0 -> B1.s0 {
	broadcast(tgt,msg,j)[pc[2][6] = 5]/
	receiving=false;
	self.allowsend(2);
	pc[2][6] = 6;
	bound[2][6] := 0;
	pc[2][6]:= 0;
}
---------- COMPONENT H1 ------------ 
----- Receive ----- 
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = acms) and pc[3][0] = 1]/
	bound[3][0][0] = msg[0];
	bound[3][0][1] = msg[1];
	bound[3][0][2] = msg[2];
	bound[3][0][3] = msg[3];
	OUT.received(H1,msg);
	pc[3][0] = 2;
}
 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][0][2]] > 0) and pc[3][0] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[3][0][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[3][0][1];
		msg3:int := hid[3];
		msg4:int := locality[3];
		msg5:int := price[3][bound[3][0][2]][bound[3][0][3]];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],3 ); 
		OUT.sending(H1,[msg1,msg2,msg3,msg4,msg5]);
		pc[3][0] = 3;
	} else {
		receiving=false;
		self.allowsend(3);
		pc[3][0] = 4;
		bound[3][0] := 0;
		pc[3][0]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][0] = 3]/
	receiving=false;
	self.allowsend(3);
	pc[3][0] = 4;
	bound[3][0] := 0;
	pc[3][0]:= 0;
} 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][0][2]] <= 0) and pc[3][0] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[3][0][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := nooffer;
		msg2:int := bound[3][0][1];
		self.broadcast(target,[msg1,msg2],3 ); 
		OUT.sending(H1,[msg1,msg2]);
		pc[3][0] = 5;
	} else {
		receiving=false;
		self.allowsend(3);
		pc[3][0] = 6;
		bound[3][0] := 0;
		pc[3][0]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][0] = 5]/
	receiving=false;
	self.allowsend(3);
	pc[3][0] = 6;
	bound[3][0] := 0;
	pc[3][0]:= 0;
} 
 ----- Receive ----- 
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = acms) and pc[3][1] = 1]/
	bound[3][1][0] = msg[0];
	bound[3][1][1] = msg[1];
	bound[3][1][2] = msg[2];
	bound[3][1][3] = msg[3];
	OUT.received(H1,msg);
	pc[3][1] = 2;
}
 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][1][2]] > 0) and pc[3][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[3][1][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[3][1][1];
		msg3:int := hid[3];
		msg4:int := locality[3];
		msg5:int := price[3][bound[3][1][2]][bound[3][1][3]];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],3 ); 
		OUT.sending(H1,[msg1,msg2,msg3,msg4,msg5]);
		pc[3][1] = 3;
	} else {
		receiving=false;
		self.allowsend(3);
		pc[3][1] = 4;
		bound[3][1] := 0;
		pc[3][1]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][1] = 3]/
	receiving=false;
	self.allowsend(3);
	pc[3][1] = 4;
	bound[3][1] := 0;
	pc[3][1]:= 0;
} 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][1][2]] <= 0) and pc[3][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[3][1][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := nooffer;
		msg2:int := bound[3][1][1];
		self.broadcast(target,[msg1,msg2],3 ); 
		OUT.sending(H1,[msg1,msg2]);
		pc[3][1] = 5;
	} else {
		receiving=false;
		self.allowsend(3);
		pc[3][1] = 6;
		bound[3][1] := 0;
		pc[3][1]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][1] = 5]/
	receiving=false;
	self.allowsend(3);
	pc[3][1] = 6;
	bound[3][1] := 0;
	pc[3][1]:= 0;
} 
 ----- Receive ----- 
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = book) and pc[3][2] = 1]/
	bound[3][2][0] = msg[0];
	bound[3][2][1] = msg[1];
	bound[3][2][2] = msg[2];
	bound[3][2][3] = msg[3];
	OUT.received(H1,msg);
	pc[3][2] = 2;
}
 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][2][2]] > 0) and pc[3][2] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[3][2][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := confirm;
		self.broadcast(target,[msg1],3 ); 
		OUT.sending(H1,[msg1]);
		--- attr update --- 
		room[3][bound[3][2][2]] := room[3][bound[3][2][2]]-1;
		pc[3][2] = 3;
	} else {
		--- attr update --- 
		room[3][bound[3][2][2]] := room[3][bound[3][2][2]]-1;
		receiving=false;
		self.allowsend(3);
		pc[3][2] = 4;
		bound[3][2] := 0;
		pc[3][2]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][2] = 3]/
	receiving=false;
	self.allowsend(3);
	pc[3][2] = 4;
	bound[3][2] := 0;
	pc[3][2]:= 0;
} 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][2][2]] = 0) and pc[3][2] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[3][2][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := toolate;
		self.broadcast(target,[msg1],3 ); 
		OUT.sending(H1,[msg1]);
		pc[3][2] = 5;
	} else {
		receiving=false;
		self.allowsend(3);
		pc[3][2] = 6;
		bound[3][2] := 0;
		pc[3][2]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][2] = 5]/
	receiving=false;
	self.allowsend(3);
	pc[3][2] = 6;
	bound[3][2] := 0;
	pc[3][2]:= 0;
} 
 ----- Receive ----- 
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = book) and pc[3][3] = 1]/
	bound[3][3][0] = msg[0];
	bound[3][3][1] = msg[1];
	bound[3][3][2] = msg[2];
	bound[3][3][3] = msg[3];
	OUT.received(H1,msg);
	pc[3][3] = 2;
}
 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][3][2]] > 0) and pc[3][3] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[3][3][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := confirm;
		self.broadcast(target,[msg1],3 ); 
		OUT.sending(H1,[msg1]);
		--- attr update --- 
		room[3][bound[3][3][2]] := room[3][bound[3][3][2]]-1;
		pc[3][3] = 3;
	} else {
		--- attr update --- 
		room[3][bound[3][3][2]] := room[3][bound[3][3][2]]-1;
		receiving=false;
		self.allowsend(3);
		pc[3][3] = 4;
		bound[3][3] := 0;
		pc[3][3]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][3] = 3]/
	receiving=false;
	self.allowsend(3);
	pc[3][3] = 4;
	bound[3][3] := 0;
	pc[3][3]:= 0;
} 
 ----- Send ----- 
SYS.H1.s0 -> H1.s0 {
	allowsend(i)[receiving = false and i = 3 and (room[3][bound[3][3][2]] = 0) and pc[3][3] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[3][3][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := toolate;
		self.broadcast(target,[msg1],3 ); 
		OUT.sending(H1,[msg1]);
		pc[3][3] = 5;
	} else {
		receiving=false;
		self.allowsend(3);
		pc[3][3] = 6;
		bound[3][3] := 0;
		pc[3][3]:= 0;
	};
}
SYS.H1.s0 -> H1.s0 {
	broadcast(tgt,msg,j)[pc[3][3] = 5]/
	receiving=false;
	self.allowsend(3);
	pc[3][3] = 6;
	bound[3][3] := 0;
	pc[3][3]:= 0;
}
---------- COMPONENT H2 ------------ 
----- Receive ----- 
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[tgt[4] = 1 and (msg[0] = acms) and pc[4][0] = 1]/
	bound[4][0][0] = msg[0];
	bound[4][0][1] = msg[1];
	bound[4][0][2] = msg[2];
	bound[4][0][3] = msg[3];
	OUT.received(H2,msg);
	pc[4][0] = 2;
}
 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][0][2]] > 0) and pc[4][0] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[4][0][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[4][0][1];
		msg3:int := hid[4];
		msg4:int := locality[4];
		msg5:int := price[4][bound[4][0][2]][bound[4][0][3]];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],4 ); 
		OUT.sending(H2,[msg1,msg2,msg3,msg4,msg5]);
		pc[4][0] = 3;
	} else {
		receiving=false;
		self.allowsend(4);
		pc[4][0] = 4;
		bound[4][0] := 0;
		pc[4][0]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][0] = 3]/
	receiving=false;
	self.allowsend(4);
	pc[4][0] = 4;
	bound[4][0] := 0;
	pc[4][0]:= 0;
} 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][0][2]] <= 0) and pc[4][0] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[4][0][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := nooffer;
		msg2:int := bound[4][0][1];
		self.broadcast(target,[msg1,msg2],4 ); 
		OUT.sending(H2,[msg1,msg2]);
		pc[4][0] = 5;
	} else {
		receiving=false;
		self.allowsend(4);
		pc[4][0] = 6;
		bound[4][0] := 0;
		pc[4][0]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][0] = 5]/
	receiving=false;
	self.allowsend(4);
	pc[4][0] = 6;
	bound[4][0] := 0;
	pc[4][0]:= 0;
} 
 ----- Receive ----- 
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[tgt[4] = 1 and (msg[0] = acms) and pc[4][1] = 1]/
	bound[4][1][0] = msg[0];
	bound[4][1][1] = msg[1];
	bound[4][1][2] = msg[2];
	bound[4][1][3] = msg[3];
	OUT.received(H2,msg);
	pc[4][1] = 2;
}
 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][1][2]] > 0) and pc[4][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[4][1][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[4][1][1];
		msg3:int := hid[4];
		msg4:int := locality[4];
		msg5:int := price[4][bound[4][1][2]][bound[4][1][3]];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],4 ); 
		OUT.sending(H2,[msg1,msg2,msg3,msg4,msg5]);
		pc[4][1] = 3;
	} else {
		receiving=false;
		self.allowsend(4);
		pc[4][1] = 4;
		bound[4][1] := 0;
		pc[4][1]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][1] = 3]/
	receiving=false;
	self.allowsend(4);
	pc[4][1] = 4;
	bound[4][1] := 0;
	pc[4][1]:= 0;
} 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][1][2]] <= 0) and pc[4][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[4][1][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := nooffer;
		msg2:int := bound[4][1][1];
		self.broadcast(target,[msg1,msg2],4 ); 
		OUT.sending(H2,[msg1,msg2]);
		pc[4][1] = 5;
	} else {
		receiving=false;
		self.allowsend(4);
		pc[4][1] = 6;
		bound[4][1] := 0;
		pc[4][1]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][1] = 5]/
	receiving=false;
	self.allowsend(4);
	pc[4][1] = 6;
	bound[4][1] := 0;
	pc[4][1]:= 0;
} 
 ----- Receive ----- 
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[tgt[4] = 1 and (msg[0] = book) and pc[4][2] = 1]/
	bound[4][2][0] = msg[0];
	bound[4][2][1] = msg[1];
	bound[4][2][2] = msg[2];
	bound[4][2][3] = msg[3];
	OUT.received(H2,msg);
	pc[4][2] = 2;
}
 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][2][2]] > 0) and pc[4][2] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[4][2][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := confirm;
		self.broadcast(target,[msg1],4 ); 
		OUT.sending(H2,[msg1]);
		--- attr update --- 
		room[4][bound[4][2][2]] := room[4][bound[4][2][2]]-1;
		pc[4][2] = 3;
	} else {
		--- attr update --- 
		room[4][bound[4][2][2]] := room[4][bound[4][2][2]]-1;
		receiving=false;
		self.allowsend(4);
		pc[4][2] = 4;
		bound[4][2] := 0;
		pc[4][2]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][2] = 3]/
	receiving=false;
	self.allowsend(4);
	pc[4][2] = 4;
	bound[4][2] := 0;
	pc[4][2]:= 0;
} 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][2][2]] = 0) and pc[4][2] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[4][2][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := toolate;
		self.broadcast(target,[msg1],4 ); 
		OUT.sending(H2,[msg1]);
		pc[4][2] = 5;
	} else {
		receiving=false;
		self.allowsend(4);
		pc[4][2] = 6;
		bound[4][2] := 0;
		pc[4][2]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][2] = 5]/
	receiving=false;
	self.allowsend(4);
	pc[4][2] = 6;
	bound[4][2] := 0;
	pc[4][2]:= 0;
} 
 ----- Receive ----- 
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[tgt[4] = 1 and (msg[0] = book) and pc[4][3] = 1]/
	bound[4][3][0] = msg[0];
	bound[4][3][1] = msg[1];
	bound[4][3][2] = msg[2];
	bound[4][3][3] = msg[3];
	OUT.received(H2,msg);
	pc[4][3] = 2;
}
 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][3][2]] > 0) and pc[4][3] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[4][3][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := confirm;
		self.broadcast(target,[msg1],4 ); 
		OUT.sending(H2,[msg1]);
		--- attr update --- 
		room[4][bound[4][3][2]] := room[4][bound[4][3][2]]-1;
		pc[4][3] = 3;
	} else {
		--- attr update --- 
		room[4][bound[4][3][2]] := room[4][bound[4][3][2]]-1;
		receiving=false;
		self.allowsend(4);
		pc[4][3] = 4;
		bound[4][3] := 0;
		pc[4][3]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][3] = 3]/
	receiving=false;
	self.allowsend(4);
	pc[4][3] = 4;
	bound[4][3] := 0;
	pc[4][3]:= 0;
} 
 ----- Send ----- 
SYS.H2.s0 -> H2.s0 {
	allowsend(i)[receiving = false and i = 4 and (room[4][bound[4][3][2]] = 0) and pc[4][3] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[4][3][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := toolate;
		self.broadcast(target,[msg1],4 ); 
		OUT.sending(H2,[msg1]);
		pc[4][3] = 5;
	} else {
		receiving=false;
		self.allowsend(4);
		pc[4][3] = 6;
		bound[4][3] := 0;
		pc[4][3]:= 0;
	};
}
SYS.H2.s0 -> H2.s0 {
	broadcast(tgt,msg,j)[pc[4][3] = 5]/
	receiving=false;
	self.allowsend(4);
	pc[4][3] = 6;
	bound[4][3] := 0;
	pc[4][3]:= 0;
}
---------- COMPONENT H3 ------------ 
----- Receive ----- 
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[tgt[5] = 1 and (msg[0] = acms) and pc[5][0] = 1]/
	bound[5][0][0] = msg[0];
	bound[5][0][1] = msg[1];
	bound[5][0][2] = msg[2];
	bound[5][0][3] = msg[3];
	OUT.received(H3,msg);
	pc[5][0] = 2;
}
 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][0][2]] > 0) and pc[5][0] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[5][0][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[5][0][1];
		msg3:int := hid[5];
		msg4:int := locality[5];
		msg5:int := price[5][bound[5][0][2]][bound[5][0][3]];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],5 ); 
		OUT.sending(H3,[msg1,msg2,msg3,msg4,msg5]);
		pc[5][0] = 3;
	} else {
		receiving=false;
		self.allowsend(5);
		pc[5][0] = 4;
		bound[5][0] := 0;
		pc[5][0]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][0] = 3]/
	receiving=false;
	self.allowsend(5);
	pc[5][0] = 4;
	bound[5][0] := 0;
	pc[5][0]:= 0;
} 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][0][2]] <= 0) and pc[5][0] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[5][0][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := nooffer;
		msg2:int := bound[5][0][1];
		self.broadcast(target,[msg1,msg2],5 ); 
		OUT.sending(H3,[msg1,msg2]);
		pc[5][0] = 5;
	} else {
		receiving=false;
		self.allowsend(5);
		pc[5][0] = 6;
		bound[5][0] := 0;
		pc[5][0]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][0] = 5]/
	receiving=false;
	self.allowsend(5);
	pc[5][0] = 6;
	bound[5][0] := 0;
	pc[5][0]:= 0;
} 
 ----- Receive ----- 
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[tgt[5] = 1 and (msg[0] = acms) and pc[5][1] = 1]/
	bound[5][1][0] = msg[0];
	bound[5][1][1] = msg[1];
	bound[5][1][2] = msg[2];
	bound[5][1][3] = msg[3];
	OUT.received(H3,msg);
	pc[5][1] = 2;
}
 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][1][2]] > 0) and pc[5][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[5][1][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := offer;
		msg2:int := bound[5][1][1];
		msg3:int := hid[5];
		msg4:int := locality[5];
		msg5:int := price[5][bound[5][1][2]][bound[5][1][3]];
		self.broadcast(target,[msg1,msg2,msg3,msg4,msg5],5 ); 
		OUT.sending(H3,[msg1,msg2,msg3,msg4,msg5]);
		pc[5][1] = 3;
	} else {
		receiving=false;
		self.allowsend(5);
		pc[5][1] = 4;
		bound[5][1] := 0;
		pc[5][1]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][1] = 3]/
	receiving=false;
	self.allowsend(5);
	pc[5][1] = 4;
	bound[5][1] := 0;
	pc[5][1]:= 0;
} 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][1][2]] <= 0) and pc[5][1] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (bid[j] = bound[5][1][3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := nooffer;
		msg2:int := bound[5][1][1];
		self.broadcast(target,[msg1,msg2],5 ); 
		OUT.sending(H3,[msg1,msg2]);
		pc[5][1] = 5;
	} else {
		receiving=false;
		self.allowsend(5);
		pc[5][1] = 6;
		bound[5][1] := 0;
		pc[5][1]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][1] = 5]/
	receiving=false;
	self.allowsend(5);
	pc[5][1] = 6;
	bound[5][1] := 0;
	pc[5][1]:= 0;
} 
 ----- Receive ----- 
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[tgt[5] = 1 and (msg[0] = book) and pc[5][2] = 1]/
	bound[5][2][0] = msg[0];
	bound[5][2][1] = msg[1];
	bound[5][2][2] = msg[2];
	bound[5][2][3] = msg[3];
	OUT.received(H3,msg);
	pc[5][2] = 2;
}
 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][2][2]] > 0) and pc[5][2] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[5][2][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := confirm;
		self.broadcast(target,[msg1],5 ); 
		OUT.sending(H3,[msg1]);
		--- attr update --- 
		room[5][bound[5][2][2]] := room[5][bound[5][2][2]]-1;
		pc[5][2] = 3;
	} else {
		--- attr update --- 
		room[5][bound[5][2][2]] := room[5][bound[5][2][2]]-1;
		receiving=false;
		self.allowsend(5);
		pc[5][2] = 4;
		bound[5][2] := 0;
		pc[5][2]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][2] = 3]/
	receiving=false;
	self.allowsend(5);
	pc[5][2] = 4;
	bound[5][2] := 0;
	pc[5][2]:= 0;
} 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][2][2]] = 0) and pc[5][2] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[5][2][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := toolate;
		self.broadcast(target,[msg1],5 ); 
		OUT.sending(H3,[msg1]);
		pc[5][2] = 5;
	} else {
		receiving=false;
		self.allowsend(5);
		pc[5][2] = 6;
		bound[5][2] := 0;
		pc[5][2]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][2] = 5]/
	receiving=false;
	self.allowsend(5);
	pc[5][2] = 6;
	bound[5][2] := 0;
	pc[5][2]:= 0;
} 
 ----- Receive ----- 
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[tgt[5] = 1 and (msg[0] = book) and pc[5][3] = 1]/
	bound[5][3][0] = msg[0];
	bound[5][3][1] = msg[1];
	bound[5][3][2] = msg[2];
	bound[5][3][3] = msg[3];
	OUT.received(H3,msg);
	pc[5][3] = 2;
}
 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][3][2]] > 0) and pc[5][3] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[5][3][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := confirm;
		self.broadcast(target,[msg1],5 ); 
		OUT.sending(H3,[msg1]);
		--- attr update --- 
		room[5][bound[5][3][2]] := room[5][bound[5][3][2]]-1;
		pc[5][3] = 3;
	} else {
		--- attr update --- 
		room[5][bound[5][3][2]] := room[5][bound[5][3][2]]-1;
		receiving=false;
		self.allowsend(5);
		pc[5][3] = 4;
		bound[5][3] := 0;
		pc[5][3]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][3] = 3]/
	receiving=false;
	self.allowsend(5);
	pc[5][3] = 4;
	bound[5][3] := 0;
	pc[5][3]:= 0;
} 
 ----- Send ----- 
SYS.H3.s0 -> H3.s0 {
	allowsend(i)[receiving = false and i = 5 and (room[5][bound[5][3][2]] = 0) and pc[5][3] = 2]/
	target:int[];
	for j in 0..pc.length-1 {
	if (cid[j] = bound[5][3][1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:int := toolate;
		self.broadcast(target,[msg1],5 ); 
		OUT.sending(H3,[msg1]);
		pc[5][3] = 5;
	} else {
		receiving=false;
		self.allowsend(5);
		pc[5][3] = 6;
		bound[5][3] := 0;
		pc[5][3]:= 0;
	};
}
SYS.H3.s0 -> H3.s0 {
	broadcast(tgt,msg,j)[pc[5][3] = 5]/
	receiving=false;
	self.allowsend(5);
	pc[5][3] = 6;
	bound[5][3] := 0;
	pc[5][3]:= 0;
}
end System;


acms, book, confirm, finish, nooffer, offer, toolate, trustedBroker, trustedCust, trustedHotel, undef : Token; 

Cust1,Cust2,B1,H1,H2,H3 : Token; 

OO : System (favh -> [undef,undef,[],[],[],[]], stype -> [trustedCust,trustedCust,trustedBroker,trustedHotel,trustedHotel,trustedHotel], room -> [[],[],[],[5,1,1,1,1,1],[5,1,1,1,1,0],[5,1,1,1,1,1]], send -> [true,true,[],[],[],[]], locality -> [[],[],[],1,1,2], nh -> [[],[],[0,2,1],[],[],[]], loc -> [1,1,[],[],[],[]], day -> [5,5,[],[],[],[]], counter -> [0,0,[],[],[],[]], hid -> [[],[],[],1,2,3], bid -> [[],[],1,[],[],[]], total -> [0,0,[],[],[],[]], price -> [500,500,[],[[0,400,500],[0,400,500],[0,400,500],[0,400,500],[0,400,500],[0,400,500]],[[0,400,500],[0,400,500],[0,400,500],[0,400,500],[0,400,500],[0,400,500]],[[0,400,500],[0,400,500],[0,400,500],[0,400,500],[0,400,500],[0,400,500]]], cid -> [1,2,[],[],[],[]]);
Abstractions {
	Action sending($1,$2) -> send($1,$2)
	Action received($1,$2) -> receive($1,$2)
	State cid[0] = $2 -> has_cid(Cust1,$2)
	State favh[0] = $2 -> has_favh(Cust1,$2)
	State cid[1] = $2 -> has_cid(Cust2,$2)
	State favh[1] = $2 -> has_favh(Cust2,$2)
	State bid[2] = $2 -> has_bid(B1,$2)
	State hid[3] = $2 -> has_hid(H1,$2)
	State hid[4] = $2 -> has_hid(H2,$2)
	State hid[5] = $2 -> has_hid(H3,$2)
}

