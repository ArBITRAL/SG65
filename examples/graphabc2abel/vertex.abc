component Vertex
	  attributes: id, constraints, used, counter, send, round, done, nbr, assigned, colour
	  observables: colour, assigned
	  behaviour:
	  let {
	      F := <send = 1 and assigned = 0>('try', min_colour(this.used), this.round)@(this.id in nbr).[send := 0,colour := min_colour(this.used)]F

	      A := <(|nbr| = counter + done) and colour > 0 and (colour notin constraints ++ used)>('donec', this.colour, this.round + 1)@(this.id in nbr).[assigned := 1]nil

	      T := (x = 'try' and this.id > id and this.round = z)(x,y, z).[counter := counter + 1]T
	          +
		  (x = 'try' and this.id < id and this.round = z)(x,y, z).[counter := counter + 1, constraints := constraints ++ {y}]T
		  +
		  (x = 'try' and this.id > id and this.round < z)(x,y, z).[round := z, send := 1, counter := 1, constraints := {}]T
		  +
		  (x = 'try' and this.id < id and this.round < z)(x,y, z).[round := z, send := 1, counter := 1, constraints := {y}]T

      	      D := (x = 'donec' and this.round >= z)(x,y, z).[done := done + 1, used := used ++ {y}]D
	     	  +
	  	  (x = 'donec' and this.round < z)(x,y,z).[round := z, done := done + 1, send := 1, counter := 0, used := used ++ {y}, constraints := {}]D
	   }
	   init  F | D | A | T
end


%%C1: Vertex (id -> 1, nbr -> [2], colour -> 0, round -> 0, done -> 0, send -> 1, assigned -> 0, used -> [], counter -> 0, constraints -> [])
%%C2: Vertex (id -> 2, nbr -> [1], colour -> 0, round -> 0, done -> 0, send -> 1, assigned -> 0, used -> [], counter -> 0, constraints -> [])
%%C3: Vertex (id -> 3, nbr -> [1,2], colour -> 0, round -> 0, done -> 0, send -> 1, assigned -> 0, used -> [], counter -> 0, constraints -> [])
%%C4: Vertex (id -> 4, nbr -> [2], colour -> 0, round -> 0, done -> 0, send -> , assigned -> 0, used -> [], counter -> 0, constraints -> [])
