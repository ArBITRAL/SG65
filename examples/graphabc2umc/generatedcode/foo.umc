Class System with niceparallelism is
Signals:
	allowsend(i:int);
	broadcast(tgt,msg,j:int);
Vars:
	RANDOMQUEUE;
	receiving:bool := false;
	pc :int[];
	bound:int[];
	
	-- attributes
	all;
	assigned;
	color;
	constraints;
	counter;
	done;
	id;
	nbr;
	round;
	send;
	used;
State Top Defers allowsend(i)
Transitions:
init -> SYS {-/ 
	pc := [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]];
	bound := [[[],[],[],[]],[[],[],[],[]],[[],[],[],[]],[[],[],[],[]]];
	for i in 0..pc.length-1 {
		self.allowsend(i);
	}}

 ---------- COMPONENT TEMPLATE Vertex ------------ 

define(Vertex, 
 ----- Send ----- 
SYS.$2.s0 -> $2.s0 {
	allowsend(i)[receiving = false and i = $1 and (send[$1] = true and assigned[$1] = false) and pc[$1][0] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[$1] in nbr[j]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := tryc;
		tmp: obj := all[$1]-used[$1];
		msg2:obj := tmp.min;
		msg3:obj := round[$1];
		self.broadcast(target,[msg1,msg2,msg3],$1 ); 
		OUT.sending($2,[msg1,msg2,msg3]);
		--- attr update --- 
		send[$1] := false;
		vectemp: obj := all[$1]-used[$1];
		color[$1]:= vectemp.toset.min;
		pc[$1][0] = 2;
	} else {
		--- attr update --- 
		send[$1] := false;
		vectemp: obj := all[$1]-used[$1];
		color[$1]:= vectemp.toset.min;
		receiving=false;
		self.allowsend($1);
		pc[$1][0] = 1;
		bound[$1][0] := [];
	};
}
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[pc[$1][0] = 2]/
	receiving=false;
	self.allowsend($1);
	pc[$1][0] = 1;
	bound[$1][0] := [];
} 
 ----- Receive ----- 
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[tgt[$1] = 1 and (msg[0] = tryc and id[$1] > id[j] and round[$1] = msg[2]) and pc[$1][1] = 1]/
	bound[$1][1][0] = msg[0];
	bound[$1][1][1] = msg[1];
	bound[$1][1][2] = msg[2];
	counter[$1] := counter[$1]+1;
	OUT.received($2,msg);
	pc[$1][1] = 1;
	bound[$1][1] := [];
}
 
 ----- Receive ----- 
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[tgt[$1] = 1 and (msg[0] = tryc and id[$1] < id[j] and round[$1] = msg[2]) and pc[$1][1] = 1]/
	bound[$1][1][0] = msg[0];
	bound[$1][1][1] = msg[1];
	bound[$1][1][2] = msg[2];
	counter[$1] := counter[$1]+1;
	vectemp: obj := constraints[$1]+[msg[1]];
		constraints[$1]:= vectemp.toset;
	OUT.received($2,msg);
	pc[$1][1] = 1;
	bound[$1][1] := [];
}
 
 ----- Receive ----- 
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[tgt[$1] = 1 and (msg[0] = tryc and id[$1] > id[j] and round[$1] < msg[2]) and pc[$1][1] = 1]/
	bound[$1][1][0] = msg[0];
	bound[$1][1][1] = msg[1];
	bound[$1][1][2] = msg[2];
	round[$1] := msg[2];
	send[$1] := true;
	counter[$1] := 1;
	constraints[$1] := [];
	OUT.received($2,msg);
	pc[$1][1] = 1;
	bound[$1][1] := [];
}
 
 ----- Receive ----- 
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[tgt[$1] = 1 and (msg[0] = tryc and id[$1] < id[j] and round[$1] < msg[2]) and pc[$1][1] = 1]/
	bound[$1][1][0] = msg[0];
	bound[$1][1][1] = msg[1];
	bound[$1][1][2] = msg[2];
	round[$1] := msg[2];
	send[$1] := true;
	counter[$1] := 1;
	constraints[$1] := [msg[1]];
	OUT.received($2,msg);
	pc[$1][1] = 1;
	bound[$1][1] := [];
}
 
 ----- Receive ----- 
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[tgt[$1] = 1 and (msg[0] = donec and round[$1] >=msg[2]) and pc[$1][2] = 1]/
	bound[$1][2][0] = msg[0];
	bound[$1][2][1] = msg[1];
	bound[$1][2][2] = msg[2];
	done[$1] := done[$1]+1;
	vectemp: obj := used[$1]+[msg[1]];
		used[$1]:= vectemp.toset;
	OUT.received($2,msg);
	pc[$1][2] = 1;
	bound[$1][2] := [];
}
 
 ----- Receive ----- 
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[tgt[$1] = 1 and (msg[0] = donec and round[$1] < msg[2]) and pc[$1][2] = 1]/
	bound[$1][2][0] = msg[0];
	bound[$1][2][1] = msg[1];
	bound[$1][2][2] = msg[2];
	round[$1] := msg[2];
	done[$1] := done[$1]+1;
	send[$1] := true;
	counter[$1] := 0;
	vectemp: obj := used[$1]+[msg[1]];
		used[$1]:= vectemp.toset;
	constraints[$1] := [];
	OUT.received($2,msg);
	pc[$1][2] = 1;
	bound[$1][2] := [];
}
 
 ----- Send ----- 
SYS.$2.s0 -> $2.s0 {
	allowsend(i)[receiving = false and i = $1 and ((nbr[$1].length = counter[$1]+done[$1]) and (color[$1] > 0) and (not color[$1] in constraints[$1]+used[$1])) and pc[$1][3] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[j] in nbr[$1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := donec;
		msg2:obj := color[$1];
		msg3:obj := round[$1]+1;
		self.broadcast(target,[msg1,msg2,msg3],$1 ); 
		OUT.sending($2,[msg1,msg2,msg3]);
		--- attr update --- 
		assigned[$1] := true;
		pc[$1][3] = 2;
	} else {
		--- attr update --- 
		assigned[$1] := true;
		receiving=false;
		self.allowsend($1);
		pc[$1][3] = 3;
		bound[$1][3] := [];
		pc[$1][3]:= 0;
	};
}
SYS.$2.s0 -> $2.s0 {
	broadcast(tgt,msg,j)[pc[$1][3] = 2]/
	receiving=false;
	self.allowsend($1);
	pc[$1][3] = 3;
	bound[$1][3] := [];
	pc[$1][3]:= 0;
})
---------- COMPONENT C1 ------------ 
Vertex(0,C1)
---------- COMPONENT C2 ------------ 
Vertex(1,C2)
---------- COMPONENT C3 ------------ 
Vertex(2,C3)
---------- COMPONENT C4 ------------ 
Vertex(3,C4)
end System;


donec, tryc : Token; 

C1,C2,C3,C4 : Token; 

OO : System (id -> [1,2,3,4], send -> [true,true,true,true], nbr -> [[4],[4],[],[1,2]], color -> [0,0,0,0], all -> [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]], done -> [0,0,0,0], round -> [0,0,0,0], counter -> [0,0,0,0], constraints -> [[],[],[],[]], used -> [[],[],[],[]], assigned -> [false,false,false,false]);
Abstractions {
	Action sending($1,$2) -> send($1,$2)
	Action received($1,$2) -> receive($1,$2)
	State OO.color[0] = $2 -> has_color(C1,$2)
	State OO.assigned[0] = $2 -> has_assigned(C1,$2)
	State OO.color[1] = $2 -> has_color(C2,$2)
	State OO.assigned[1] = $2 -> has_assigned(C2,$2)
	State OO.color[2] = $2 -> has_color(C3,$2)
	State OO.assigned[2] = $2 -> has_assigned(C3,$2)
	State OO.color[3] = $2 -> has_color(C4,$2)
	State OO.assigned[3] = $2 -> has_assigned(C4,$2)
}

