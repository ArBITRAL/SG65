Class System with niceparallelism is
Signals:
	allowsend(i:int);
	broadcast(tgt,msg,j:int);
Vars:
	RANDOMQUEUE;
	receiving:bool := false;
	pc :int[];
	bound:int[];
	
	-- attributes
	all;
	assigned;
	color;
	constraints;
	counter;
	done;
	id;
	nbr;
	round;
	send;
	used;
State Top Defers allowsend(i)
Transitions:
init -> SYS {-/ 
	pc := [[1,1,1,1],[1,1,1,1],[1,1,1,1],[1,1,1,1]];
	bound := [[[],[],[],[]],[[],[],[],[]],[[],[],[],[]],[[],[],[],[]]];
	for i in 0..pc.length-1 {
		self.allowsend(i);
	}}

 ---------- COMPONENT TEMPLATE Vertex ------------ 


---------- COMPONENT C1 ------------ 
----- Send ----- 
SYS.C1.s0 -> C1.s0 {
	allowsend(i)[receiving = false and i = 0 and (send[0] = true and assigned[0] = false) and pc[0][0] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[0] in nbr[j]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := tryc;
		tmp: obj := all[0]-used[0];
		msg2:obj := tmp.min;
		msg3:obj := round[0];
		self.broadcast(target,[msg1,msg2,msg3],0 ); 
		OUT.sending(C1,[msg1,msg2,msg3]);
		--- attr update --- 
		send[0] := false;
		vectemp: obj := all[0]-used[0];
		color[0]:= vectemp.toset.min;
		pc[0][0] = 2;
	} else {
		--- attr update --- 
		send[0] := false;
		vectemp: obj := all[0]-used[0];
		color[0]:= vectemp.toset.min;
		receiving=false;
		self.allowsend(0);
		pc[0][0] = 1;
		bound[0][0] := [];
	};
}
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[pc[0][0] = 2]/
	receiving=false;
	self.allowsend(0);
	pc[0][0] = 1;
	bound[0][0] := [];
} 
 ----- Receive ----- 
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = tryc and id[0] > id[j] and round[0] = msg[2]) and pc[0][1] = 1]/
	bound[0][1][0] = msg[0];
	bound[0][1][1] = msg[1];
	bound[0][1][2] = msg[2];
	counter[0] := counter[0]+1;
	OUT.received(C1,msg);
	pc[0][1] = 1;
	bound[0][1] := [];
}
 
 ----- Receive ----- 
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = tryc and id[0] < id[j] and round[0] = msg[2]) and pc[0][1] = 1]/
	bound[0][1][0] = msg[0];
	bound[0][1][1] = msg[1];
	bound[0][1][2] = msg[2];
	counter[0] := counter[0]+1;
	vectemp: obj := constraints[0]+[msg[1]];
		constraints[0]:= vectemp.toset;
	OUT.received(C1,msg);
	pc[0][1] = 1;
	bound[0][1] := [];
}
 
 ----- Receive ----- 
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = tryc and id[0] > id[j] and round[0] < msg[2]) and pc[0][1] = 1]/
	bound[0][1][0] = msg[0];
	bound[0][1][1] = msg[1];
	bound[0][1][2] = msg[2];
	round[0] := msg[2];
	send[0] := true;
	counter[0] := 1;
	constraints[0] := [];
	OUT.received(C1,msg);
	pc[0][1] = 1;
	bound[0][1] := [];
}
 
 ----- Receive ----- 
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = tryc and id[0] < id[j] and round[0] < msg[2]) and pc[0][1] = 1]/
	bound[0][1][0] = msg[0];
	bound[0][1][1] = msg[1];
	bound[0][1][2] = msg[2];
	round[0] := msg[2];
	send[0] := true;
	counter[0] := 1;
	constraints[0] := [msg[1]];
	OUT.received(C1,msg);
	pc[0][1] = 1;
	bound[0][1] := [];
}
 
 ----- Receive ----- 
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = donec and round[0] >=msg[2]) and pc[0][2] = 1]/
	bound[0][2][0] = msg[0];
	bound[0][2][1] = msg[1];
	bound[0][2][2] = msg[2];
	done[0] := done[0]+1;
	vectemp: obj := used[0]+[msg[1]];
		used[0]:= vectemp.toset;
	OUT.received(C1,msg);
	pc[0][2] = 1;
	bound[0][2] := [];
}
 
 ----- Receive ----- 
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[tgt[0] = 1 and (msg[0] = donec and round[0] < msg[2]) and pc[0][2] = 1]/
	bound[0][2][0] = msg[0];
	bound[0][2][1] = msg[1];
	bound[0][2][2] = msg[2];
	round[0] := msg[2];
	done[0] := done[0]+1;
	send[0] := true;
	counter[0] := 0;
	vectemp: obj := used[0]+[msg[1]];
		used[0]:= vectemp.toset;
	constraints[0] := [];
	OUT.received(C1,msg);
	pc[0][2] = 1;
	bound[0][2] := [];
}
 
 ----- Send ----- 
SYS.C1.s0 -> C1.s0 {
	allowsend(i)[receiving = false and i = 0 and ((nbr[0].length = counter[0]+done[0]) and (color[0] > 0) and (not color[0] in constraints[0]+used[0])) and pc[0][3] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[j] in nbr[0]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := donec;
		msg2:obj := color[0];
		msg3:obj := round[0]+1;
		self.broadcast(target,[msg1,msg2,msg3],0 ); 
		OUT.sending(C1,[msg1,msg2,msg3]);
		--- attr update --- 
		assigned[0] := true;
		pc[0][3] = 2;
	} else {
		--- attr update --- 
		assigned[0] := true;
		receiving=false;
		self.allowsend(0);
		pc[0][3] = 3;
		bound[0][3] := [];
		pc[0][3]:= 0;
	};
}
SYS.C1.s0 -> C1.s0 {
	broadcast(tgt,msg,j)[pc[0][3] = 2]/
	receiving=false;
	self.allowsend(0);
	pc[0][3] = 3;
	bound[0][3] := [];
	pc[0][3]:= 0;
}
---------- COMPONENT C2 ------------ 
----- Send ----- 
SYS.C2.s0 -> C2.s0 {
	allowsend(i)[receiving = false and i = 1 and (send[1] = true and assigned[1] = false) and pc[1][0] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[1] in nbr[j]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := tryc;
		tmp: obj := all[1]-used[1];
		msg2:obj := tmp.min;
		msg3:obj := round[1];
		self.broadcast(target,[msg1,msg2,msg3],1 ); 
		OUT.sending(C2,[msg1,msg2,msg3]);
		--- attr update --- 
		send[1] := false;
		vectemp: obj := all[1]-used[1];
		color[1]:= vectemp.toset.min;
		pc[1][0] = 2;
	} else {
		--- attr update --- 
		send[1] := false;
		vectemp: obj := all[1]-used[1];
		color[1]:= vectemp.toset.min;
		receiving=false;
		self.allowsend(1);
		pc[1][0] = 1;
		bound[1][0] := [];
	};
}
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[pc[1][0] = 2]/
	receiving=false;
	self.allowsend(1);
	pc[1][0] = 1;
	bound[1][0] := [];
} 
 ----- Receive ----- 
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = tryc and id[1] > id[j] and round[1] = msg[2]) and pc[1][1] = 1]/
	bound[1][1][0] = msg[0];
	bound[1][1][1] = msg[1];
	bound[1][1][2] = msg[2];
	counter[1] := counter[1]+1;
	OUT.received(C2,msg);
	pc[1][1] = 1;
	bound[1][1] := [];
}
 
 ----- Receive ----- 
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = tryc and id[1] < id[j] and round[1] = msg[2]) and pc[1][1] = 1]/
	bound[1][1][0] = msg[0];
	bound[1][1][1] = msg[1];
	bound[1][1][2] = msg[2];
	counter[1] := counter[1]+1;
	vectemp: obj := constraints[1]+[msg[1]];
		constraints[1]:= vectemp.toset;
	OUT.received(C2,msg);
	pc[1][1] = 1;
	bound[1][1] := [];
}
 
 ----- Receive ----- 
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = tryc and id[1] > id[j] and round[1] < msg[2]) and pc[1][1] = 1]/
	bound[1][1][0] = msg[0];
	bound[1][1][1] = msg[1];
	bound[1][1][2] = msg[2];
	round[1] := msg[2];
	send[1] := true;
	counter[1] := 1;
	constraints[1] := [];
	OUT.received(C2,msg);
	pc[1][1] = 1;
	bound[1][1] := [];
}
 
 ----- Receive ----- 
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = tryc and id[1] < id[j] and round[1] < msg[2]) and pc[1][1] = 1]/
	bound[1][1][0] = msg[0];
	bound[1][1][1] = msg[1];
	bound[1][1][2] = msg[2];
	round[1] := msg[2];
	send[1] := true;
	counter[1] := 1;
	constraints[1] := [msg[1]];
	OUT.received(C2,msg);
	pc[1][1] = 1;
	bound[1][1] := [];
}
 
 ----- Receive ----- 
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = donec and round[1] >=msg[2]) and pc[1][2] = 1]/
	bound[1][2][0] = msg[0];
	bound[1][2][1] = msg[1];
	bound[1][2][2] = msg[2];
	done[1] := done[1]+1;
	vectemp: obj := used[1]+[msg[1]];
		used[1]:= vectemp.toset;
	OUT.received(C2,msg);
	pc[1][2] = 1;
	bound[1][2] := [];
}
 
 ----- Receive ----- 
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[tgt[1] = 1 and (msg[0] = donec and round[1] < msg[2]) and pc[1][2] = 1]/
	bound[1][2][0] = msg[0];
	bound[1][2][1] = msg[1];
	bound[1][2][2] = msg[2];
	round[1] := msg[2];
	done[1] := done[1]+1;
	send[1] := true;
	counter[1] := 0;
	vectemp: obj := used[1]+[msg[1]];
		used[1]:= vectemp.toset;
	constraints[1] := [];
	OUT.received(C2,msg);
	pc[1][2] = 1;
	bound[1][2] := [];
}
 
 ----- Send ----- 
SYS.C2.s0 -> C2.s0 {
	allowsend(i)[receiving = false and i = 1 and ((nbr[1].length = counter[1]+done[1]) and (color[1] > 0) and (not color[1] in constraints[1]+used[1])) and pc[1][3] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[j] in nbr[1]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := donec;
		msg2:obj := color[1];
		msg3:obj := round[1]+1;
		self.broadcast(target,[msg1,msg2,msg3],1 ); 
		OUT.sending(C2,[msg1,msg2,msg3]);
		--- attr update --- 
		assigned[1] := true;
		pc[1][3] = 2;
	} else {
		--- attr update --- 
		assigned[1] := true;
		receiving=false;
		self.allowsend(1);
		pc[1][3] = 3;
		bound[1][3] := [];
		pc[1][3]:= 0;
	};
}
SYS.C2.s0 -> C2.s0 {
	broadcast(tgt,msg,j)[pc[1][3] = 2]/
	receiving=false;
	self.allowsend(1);
	pc[1][3] = 3;
	bound[1][3] := [];
	pc[1][3]:= 0;
}
---------- COMPONENT C3 ------------ 
----- Send ----- 
SYS.C3.s0 -> C3.s0 {
	allowsend(i)[receiving = false and i = 2 and (send[2] = true and assigned[2] = false) and pc[2][0] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[2] in nbr[j]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := tryc;
		tmp: obj := all[2]-used[2];
		msg2:obj := tmp.min;
		msg3:obj := round[2];
		self.broadcast(target,[msg1,msg2,msg3],2 ); 
		OUT.sending(C3,[msg1,msg2,msg3]);
		--- attr update --- 
		send[2] := false;
		vectemp: obj := all[2]-used[2];
		color[2]:= vectemp.toset.min;
		pc[2][0] = 2;
	} else {
		--- attr update --- 
		send[2] := false;
		vectemp: obj := all[2]-used[2];
		color[2]:= vectemp.toset.min;
		receiving=false;
		self.allowsend(2);
		pc[2][0] = 1;
		bound[2][0] := [];
	};
}
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[pc[2][0] = 2]/
	receiving=false;
	self.allowsend(2);
	pc[2][0] = 1;
	bound[2][0] := [];
} 
 ----- Receive ----- 
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = tryc and id[2] > id[j] and round[2] = msg[2]) and pc[2][1] = 1]/
	bound[2][1][0] = msg[0];
	bound[2][1][1] = msg[1];
	bound[2][1][2] = msg[2];
	counter[2] := counter[2]+1;
	OUT.received(C3,msg);
	pc[2][1] = 1;
	bound[2][1] := [];
}
 
 ----- Receive ----- 
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = tryc and id[2] < id[j] and round[2] = msg[2]) and pc[2][1] = 1]/
	bound[2][1][0] = msg[0];
	bound[2][1][1] = msg[1];
	bound[2][1][2] = msg[2];
	counter[2] := counter[2]+1;
	vectemp: obj := constraints[2]+[msg[1]];
		constraints[2]:= vectemp.toset;
	OUT.received(C3,msg);
	pc[2][1] = 1;
	bound[2][1] := [];
}
 
 ----- Receive ----- 
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = tryc and id[2] > id[j] and round[2] < msg[2]) and pc[2][1] = 1]/
	bound[2][1][0] = msg[0];
	bound[2][1][1] = msg[1];
	bound[2][1][2] = msg[2];
	round[2] := msg[2];
	send[2] := true;
	counter[2] := 1;
	constraints[2] := [];
	OUT.received(C3,msg);
	pc[2][1] = 1;
	bound[2][1] := [];
}
 
 ----- Receive ----- 
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = tryc and id[2] < id[j] and round[2] < msg[2]) and pc[2][1] = 1]/
	bound[2][1][0] = msg[0];
	bound[2][1][1] = msg[1];
	bound[2][1][2] = msg[2];
	round[2] := msg[2];
	send[2] := true;
	counter[2] := 1;
	constraints[2] := [msg[1]];
	OUT.received(C3,msg);
	pc[2][1] = 1;
	bound[2][1] := [];
}
 
 ----- Receive ----- 
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = donec and round[2] >=msg[2]) and pc[2][2] = 1]/
	bound[2][2][0] = msg[0];
	bound[2][2][1] = msg[1];
	bound[2][2][2] = msg[2];
	done[2] := done[2]+1;
	vectemp: obj := used[2]+[msg[1]];
		used[2]:= vectemp.toset;
	OUT.received(C3,msg);
	pc[2][2] = 1;
	bound[2][2] := [];
}
 
 ----- Receive ----- 
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[tgt[2] = 1 and (msg[0] = donec and round[2] < msg[2]) and pc[2][2] = 1]/
	bound[2][2][0] = msg[0];
	bound[2][2][1] = msg[1];
	bound[2][2][2] = msg[2];
	round[2] := msg[2];
	done[2] := done[2]+1;
	send[2] := true;
	counter[2] := 0;
	vectemp: obj := used[2]+[msg[1]];
		used[2]:= vectemp.toset;
	constraints[2] := [];
	OUT.received(C3,msg);
	pc[2][2] = 1;
	bound[2][2] := [];
}
 
 ----- Send ----- 
SYS.C3.s0 -> C3.s0 {
	allowsend(i)[receiving = false and i = 2 and ((nbr[2].length = counter[2]+done[2]) and (color[2] > 0) and (not color[2] in constraints[2]+used[2])) and pc[2][3] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[j] in nbr[2]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := donec;
		msg2:obj := color[2];
		msg3:obj := round[2]+1;
		self.broadcast(target,[msg1,msg2,msg3],2 ); 
		OUT.sending(C3,[msg1,msg2,msg3]);
		--- attr update --- 
		assigned[2] := true;
		pc[2][3] = 2;
	} else {
		--- attr update --- 
		assigned[2] := true;
		receiving=false;
		self.allowsend(2);
		pc[2][3] = 3;
		bound[2][3] := [];
		pc[2][3]:= 0;
	};
}
SYS.C3.s0 -> C3.s0 {
	broadcast(tgt,msg,j)[pc[2][3] = 2]/
	receiving=false;
	self.allowsend(2);
	pc[2][3] = 3;
	bound[2][3] := [];
	pc[2][3]:= 0;
}
---------- COMPONENT C4 ------------ 
----- Send ----- 
SYS.C4.s0 -> C4.s0 {
	allowsend(i)[receiving = false and i = 3 and (send[3] = true and assigned[3] = false) and pc[3][0] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[3] in nbr[j]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := tryc;
		tmp: obj := all[3]-used[3];
		msg2:obj := tmp.min;
		msg3:obj := round[3];
		self.broadcast(target,[msg1,msg2,msg3],3 ); 
		OUT.sending(C4,[msg1,msg2,msg3]);
		--- attr update --- 
		send[3] := false;
		vectemp: obj := all[3]-used[3];
		color[3]:= vectemp.toset.min;
		pc[3][0] = 2;
	} else {
		--- attr update --- 
		send[3] := false;
		vectemp: obj := all[3]-used[3];
		color[3]:= vectemp.toset.min;
		receiving=false;
		self.allowsend(3);
		pc[3][0] = 1;
		bound[3][0] := [];
	};
}
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[pc[3][0] = 2]/
	receiving=false;
	self.allowsend(3);
	pc[3][0] = 1;
	bound[3][0] := [];
} 
 ----- Receive ----- 
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = tryc and id[3] > id[j] and round[3] = msg[2]) and pc[3][1] = 1]/
	bound[3][1][0] = msg[0];
	bound[3][1][1] = msg[1];
	bound[3][1][2] = msg[2];
	counter[3] := counter[3]+1;
	OUT.received(C4,msg);
	pc[3][1] = 1;
	bound[3][1] := [];
}
 
 ----- Receive ----- 
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = tryc and id[3] < id[j] and round[3] = msg[2]) and pc[3][1] = 1]/
	bound[3][1][0] = msg[0];
	bound[3][1][1] = msg[1];
	bound[3][1][2] = msg[2];
	counter[3] := counter[3]+1;
	vectemp: obj := constraints[3]+[msg[1]];
		constraints[3]:= vectemp.toset;
	OUT.received(C4,msg);
	pc[3][1] = 1;
	bound[3][1] := [];
}
 
 ----- Receive ----- 
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = tryc and id[3] > id[j] and round[3] < msg[2]) and pc[3][1] = 1]/
	bound[3][1][0] = msg[0];
	bound[3][1][1] = msg[1];
	bound[3][1][2] = msg[2];
	round[3] := msg[2];
	send[3] := true;
	counter[3] := 1;
	constraints[3] := [];
	OUT.received(C4,msg);
	pc[3][1] = 1;
	bound[3][1] := [];
}
 
 ----- Receive ----- 
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = tryc and id[3] < id[j] and round[3] < msg[2]) and pc[3][1] = 1]/
	bound[3][1][0] = msg[0];
	bound[3][1][1] = msg[1];
	bound[3][1][2] = msg[2];
	round[3] := msg[2];
	send[3] := true;
	counter[3] := 1;
	constraints[3] := [msg[1]];
	OUT.received(C4,msg);
	pc[3][1] = 1;
	bound[3][1] := [];
}
 
 ----- Receive ----- 
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = donec and round[3] >=msg[2]) and pc[3][2] = 1]/
	bound[3][2][0] = msg[0];
	bound[3][2][1] = msg[1];
	bound[3][2][2] = msg[2];
	done[3] := done[3]+1;
	vectemp: obj := used[3]+[msg[1]];
		used[3]:= vectemp.toset;
	OUT.received(C4,msg);
	pc[3][2] = 1;
	bound[3][2] := [];
}
 
 ----- Receive ----- 
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[tgt[3] = 1 and (msg[0] = donec and round[3] < msg[2]) and pc[3][2] = 1]/
	bound[3][2][0] = msg[0];
	bound[3][2][1] = msg[1];
	bound[3][2][2] = msg[2];
	round[3] := msg[2];
	done[3] := done[3]+1;
	send[3] := true;
	counter[3] := 0;
	vectemp: obj := used[3]+[msg[1]];
		used[3]:= vectemp.toset;
	constraints[3] := [];
	OUT.received(C4,msg);
	pc[3][2] = 1;
	bound[3][2] := [];
}
 
 ----- Send ----- 
SYS.C4.s0 -> C4.s0 {
	allowsend(i)[receiving = false and i = 3 and ((nbr[3].length = counter[3]+done[3]) and (color[3] > 0) and (not color[3] in constraints[3]+used[3])) and pc[3][3] = 1]/
	target:int[];
	for j in 0..pc.length-1 {
	if (id[j] in nbr[3]) then 
		{ target[j] := 1} else {target[j]:=0;}
	};
	receiving=true;
	if target.length > 0 then { 
		msg1:obj := donec;
		msg2:obj := color[3];
		msg3:obj := round[3]+1;
		self.broadcast(target,[msg1,msg2,msg3],3 ); 
		OUT.sending(C4,[msg1,msg2,msg3]);
		--- attr update --- 
		assigned[3] := true;
		pc[3][3] = 2;
	} else {
		--- attr update --- 
		assigned[3] := true;
		receiving=false;
		self.allowsend(3);
		pc[3][3] = 3;
		bound[3][3] := [];
		pc[3][3]:= 0;
	};
}
SYS.C4.s0 -> C4.s0 {
	broadcast(tgt,msg,j)[pc[3][3] = 2]/
	receiving=false;
	self.allowsend(3);
	pc[3][3] = 3;
	bound[3][3] := [];
	pc[3][3]:= 0;
}
end System;


donec, tryc : Token; 

C1,C2,C3,C4 : Token; 

OO : System (id -> [1,2,3,4], send -> [true,true,true,true], nbr -> [[4],[4],[],[1,2]], color -> [0,0,0,0], all -> [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]], done -> [0,0,0,0], round -> [0,0,0,0], counter -> [0,0,0,0], constraints -> [[],[],[],[]], used -> [[],[],[],[]], assigned -> [false,false,false,false]);
Abstractions {
	Action sending($1,$2) -> send($1,$2)
	Action received($1,$2) -> receive($1,$2)
	State OO.color[0] = $2 -> has_color(C1,$2)
	State OO.assigned[0] = $2 -> has_assigned(C1,$2)
	State OO.color[1] = $2 -> has_color(C2,$2)
	State OO.assigned[1] = $2 -> has_assigned(C2,$2)
	State OO.color[2] = $2 -> has_color(C3,$2)
	State OO.assigned[2] = $2 -> has_assigned(C3,$2)
	State OO.color[3] = $2 -> has_color(C4,$2)
	State OO.assigned[3] = $2 -> has_assigned(C4,$2)
}

